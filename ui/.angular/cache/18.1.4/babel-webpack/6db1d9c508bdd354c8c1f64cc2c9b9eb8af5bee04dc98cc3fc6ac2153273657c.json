{"ast":null,"code":"import { EventEmitter, input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { cx } from '../../utils/ckassnames';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [\"*\"];\nexport let ButtonComponent = /*#__PURE__*/(() => {\n  class ButtonComponent {\n    constructor() {\n      this.impact = input('none');\n      this.size = input('medium');\n      this.shape = input('rounded');\n      this.tone = input('primary');\n      this.shadow = input('none');\n      this.full = input(false, {\n        transform: value => typeof value === 'string' ? value === '' : value\n      });\n      this.buttonClick = new EventEmitter();\n      this.classes = '';\n      this.baseClasses = 'font-semibold focus-visible:outline-none flex items-center justify-center focus-visible:ring-2 focus-visible:ring-offset-2 active:translate-y-px disabled:pointer-events-none disabled:opacity-50';\n      this.impactClasses = {\n        primary: {\n          bold: 'bg-primary text-primary-foreground hover:bg-primary/90 focus-visible:ring-primary',\n          light: 'bg-primary/20 text-primary hover:bg-primary/30 focus-visible:ring-primary',\n          none: 'bg-transparent text-primary hover:bg-primary/10 focus-visible:ring-primary'\n        },\n        danger: {\n          bold: 'bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive',\n          light: 'bg-destructive/20 text-destructive hover:bg-destructive/30 focus-visible:ring-destructive',\n          none: 'bg-transparent text-destructive hover:bg-destructive/10 focus-visible:ring-destructive'\n        },\n        success: {\n          bold: 'bg-green-500 text-green-950 hover:bg-green-600 focus-visible:ring-green-500',\n          light: 'bg-green-500/20 text-green-600 hover:bg-green-500/30 focus-visible:ring-green-500',\n          none: 'bg-transparent text-green-600 hover:bg-green-500/10 focus-visible:ring-green-500'\n        },\n        warning: {\n          bold: 'bg-yellow-500 text-yellow-950 hover:bg-yellow-600 focus-visible:ring-yellow-500',\n          light: 'bg-yellow-500/20 text-yellow-600 hover:bg-yellow-500/30 focus-visible:ring-yellow-500',\n          none: 'bg-transparent text-yellow-600 hover:bg-yellow-500/10 focus-visible:ring-yellow-500'\n        },\n        info: {\n          bold: 'bg-violet-500 text-white hover:bg-violet-600 focus-visible:ring-violet-500',\n          light: 'bg-violet-500/20 text-violet-600 hover:bg-violet-500/30 focus-visible:ring-violet-500',\n          none: 'bg-transparent text-violet-600 hover:bg-violet-500/10 focus-visible:ring-violet-500'\n        },\n        light: {\n          bold: 'bg-muted text-muted-foreground hover:bg-muted/90 focus-visible:ring-muted',\n          light: 'bg-muted/20 text-muted-foreground hover:bg-muted focus-visible:ring-muted',\n          none: 'bg-transparent text-muted-foreground hover:bg-muted focus-visible:ring-muted'\n        }\n      };\n      this.sizeClasses = {\n        small: 'px-3 py-1 text-xs',\n        medium: 'px-5 py-2 text-sm',\n        large: 'px-7 py-2.5 text-lg'\n      };\n      this.shapeClasses = {\n        square: 'rounded-none',\n        rounded: 'rounded-lg',\n        pill: 'rounded-full'\n      };\n      this.shadowClasses = {\n        none: '',\n        small: 'shadow-sm',\n        medium: 'shadow-md',\n        large: 'shadow-lg'\n      };\n    }\n    ngOnInit() {\n      this.classes = cx(this.baseClasses, this.impactClasses[this.tone()][this.impact()], this.sizeClasses[this.size()], this.shapeClasses[this.shape()], this.shadowClasses[this.shadow()], this.full() ? 'w-full' : '');\n    }\n    onButtonClick() {\n      this.buttonClick.emit();\n    }\n    static #_ = this.ɵfac = function ButtonComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ButtonComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ButtonComponent,\n      selectors: [[\"app-button\"]],\n      inputs: {\n        impact: [1, \"impact\"],\n        size: [1, \"size\"],\n        shape: [1, \"shape\"],\n        tone: [1, \"tone\"],\n        shadow: [1, \"shadow\"],\n        full: [1, \"full\"]\n      },\n      outputs: {\n        buttonClick: \"buttonClick\"\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c0,\n      decls: 2,\n      vars: 1,\n      consts: [[3, \"click\", \"ngClass\"]],\n      template: function ButtonComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"button\", 0);\n          i0.ɵɵlistener(\"click\", function ButtonComponent_Template_button_click_0_listener() {\n            return ctx.onButtonClick();\n          });\n          i0.ɵɵprojection(1);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngClass\", ctx.classes);\n        }\n      },\n      dependencies: [CommonModule, i1.NgClass],\n      styles: [\"/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJidXR0b24uY29tcG9uZW50LnNjc3MifQ== */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2hhcmVkL2NvbXBvbmVudHMvYnV0dG9uL2J1dHRvbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esb0tBQW9LIiwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n  return ButtonComponent;\n})();","map":{"version":3,"names":["EventEmitter","input","CommonModule","cx","ButtonComponent","constructor","impact","size","shape","tone","shadow","full","transform","value","buttonClick","classes","baseClasses","impactClasses","primary","bold","light","none","danger","success","warning","info","sizeClasses","small","medium","large","shapeClasses","square","rounded","pill","shadowClasses","ngOnInit","onButtonClick","emit","_","_2","selectors","inputs","outputs","standalone","features","i0","ɵɵStandaloneFeature","ngContentSelectors","_c0","decls","vars","consts","template","ButtonComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","ButtonComponent_Template_button_click_0_listener","ɵɵprojection","ɵɵelementEnd","ɵɵproperty","i1","NgClass","styles"],"sources":["C:\\Users\\walte\\Documents\\hackaton\\locallyflow\\ui\\src\\app\\shared\\components\\button\\button.component.ts","C:\\Users\\walte\\Documents\\hackaton\\locallyflow\\ui\\src\\app\\shared\\components\\button\\button.component.html"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output, input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { cx } from '../../utils/ckassnames';\r\n\r\ntype ButtonProps = {\r\n  impact: 'bold' | 'light' | 'none';\r\n  size: 'small' | 'medium' | 'large';\r\n  shape: 'square' | 'rounded' | 'pill';\r\n  tone: 'primary' | 'danger' | 'success' | 'warning' | 'info' | 'light';\r\n  shadow: 'none' | 'small' | 'medium' | 'large';\r\n};\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './button.component.html',\r\n  styleUrl: './button.component.scss',\r\n})\r\nexport class ButtonComponent implements OnInit {\r\n  impact = input<ButtonProps['impact']>('none');\r\n  size = input<ButtonProps['size']>('medium');\r\n  shape = input<ButtonProps['shape']>('rounded');\r\n  tone = input<ButtonProps['tone']>('primary');\r\n  shadow = input<ButtonProps['shadow']>('none');\r\n  full = input(false, {\r\n    transform: (value: boolean | string) => (typeof value === 'string' ? value === '' : value),\r\n  });\r\n\r\n  @Output() buttonClick = new EventEmitter<void>();\r\n\r\n  public classes: string = '';\r\n\r\n  baseClasses =\r\n    'font-semibold focus-visible:outline-none flex items-center justify-center focus-visible:ring-2 focus-visible:ring-offset-2 active:translate-y-px disabled:pointer-events-none disabled:opacity-50';\r\n\r\n  impactClasses: Record<ButtonProps['tone'], Record<ButtonProps['impact'], string>> = {\r\n    primary: {\r\n      bold: 'bg-primary text-primary-foreground hover:bg-primary/90 focus-visible:ring-primary',\r\n      light: 'bg-primary/20 text-primary hover:bg-primary/30 focus-visible:ring-primary',\r\n      none: 'bg-transparent text-primary hover:bg-primary/10 focus-visible:ring-primary',\r\n    },\r\n    danger: {\r\n      bold: 'bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive',\r\n      light: 'bg-destructive/20 text-destructive hover:bg-destructive/30 focus-visible:ring-destructive',\r\n      none: 'bg-transparent text-destructive hover:bg-destructive/10 focus-visible:ring-destructive',\r\n    },\r\n    success: {\r\n      bold: 'bg-green-500 text-green-950 hover:bg-green-600 focus-visible:ring-green-500',\r\n      light: 'bg-green-500/20 text-green-600 hover:bg-green-500/30 focus-visible:ring-green-500',\r\n      none: 'bg-transparent text-green-600 hover:bg-green-500/10 focus-visible:ring-green-500',\r\n    },\r\n    warning: {\r\n      bold: 'bg-yellow-500 text-yellow-950 hover:bg-yellow-600 focus-visible:ring-yellow-500',\r\n      light: 'bg-yellow-500/20 text-yellow-600 hover:bg-yellow-500/30 focus-visible:ring-yellow-500',\r\n      none: 'bg-transparent text-yellow-600 hover:bg-yellow-500/10 focus-visible:ring-yellow-500',\r\n    },\r\n    info: {\r\n      bold: 'bg-violet-500 text-white hover:bg-violet-600 focus-visible:ring-violet-500',\r\n      light: 'bg-violet-500/20 text-violet-600 hover:bg-violet-500/30 focus-visible:ring-violet-500',\r\n      none: 'bg-transparent text-violet-600 hover:bg-violet-500/10 focus-visible:ring-violet-500',\r\n    },\r\n    light: {\r\n      bold: 'bg-muted text-muted-foreground hover:bg-muted/90 focus-visible:ring-muted',\r\n      light: 'bg-muted/20 text-muted-foreground hover:bg-muted focus-visible:ring-muted',\r\n      none: 'bg-transparent text-muted-foreground hover:bg-muted focus-visible:ring-muted',\r\n    },\r\n  };\r\n\r\n  sizeClasses: Record<ButtonProps['size'], string> = {\r\n    small: 'px-3 py-1 text-xs',\r\n    medium: 'px-5 py-2 text-sm',\r\n    large: 'px-7 py-2.5 text-lg',\r\n  };\r\n\r\n  shapeClasses: Record<ButtonProps['shape'], string> = {\r\n    square: 'rounded-none',\r\n    rounded: 'rounded-lg',\r\n    pill: 'rounded-full',\r\n  };\r\n\r\n  shadowClasses: Record<ButtonProps['shadow'], string> = {\r\n    none: '',\r\n    small: 'shadow-sm',\r\n    medium: 'shadow-md',\r\n    large: 'shadow-lg',\r\n  };\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.classes = cx(\r\n      this.baseClasses,\r\n      this.impactClasses[this.tone()][this.impact()],\r\n      this.sizeClasses[this.size()],\r\n      this.shapeClasses[this.shape()],\r\n      this.shadowClasses[this.shadow()],\r\n      this.full() ? 'w-full' : '',\r\n    );\r\n  }\r\n\r\n  onButtonClick() {\r\n    this.buttonClick.emit();\r\n  }\r\n}\r\n","<button (click)=\"onButtonClick()\" [ngClass]=\"classes\">\r\n  <ng-content></ng-content>\r\n</button>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}