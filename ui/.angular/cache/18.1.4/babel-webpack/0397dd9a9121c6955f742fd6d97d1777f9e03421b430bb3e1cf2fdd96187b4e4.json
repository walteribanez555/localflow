{"ast":null,"code":"import { signal } from '@angular/core';\nimport { NavigationEnd } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Menu } from '../../../core/constants/menu';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let MenuService = /*#__PURE__*/(() => {\n  class MenuService {\n    constructor(router) {\n      this.router = router;\n      this._showSidebar = signal(true);\n      this._showMobileMenu = signal(false);\n      this._pagesMenu = signal([]);\n      this._subscription = new Subscription();\n      /** Set dynamic menu */\n      this._pagesMenu.set(Menu.pages);\n      let sub = this.router.events.subscribe(event => {\n        if (event instanceof NavigationEnd) {\n          /** Expand menu base on active route */\n          this._pagesMenu().forEach(menu => {\n            let activeGroup = false;\n            menu.items.forEach(subMenu => {\n              const active = this.isActive(subMenu.route);\n              subMenu.expanded = active;\n              subMenu.active = active;\n              if (active) activeGroup = true;\n              if (subMenu.children) {\n                this.expand(subMenu.children);\n              }\n            });\n            menu.active = activeGroup;\n          });\n        }\n      });\n      this._subscription.add(sub);\n    }\n    get showSideBar() {\n      return this._showSidebar();\n    }\n    get showMobileMenu() {\n      return this._showMobileMenu();\n    }\n    get pagesMenu() {\n      return this._pagesMenu();\n    }\n    set showSideBar(value) {\n      this._showSidebar.set(value);\n    }\n    set showMobileMenu(value) {\n      this._showMobileMenu.set(value);\n    }\n    toggleSidebar() {\n      this._showSidebar.set(!this._showSidebar());\n    }\n    toggleMenu(menu) {\n      this.showSideBar = true;\n      menu.expanded = !menu.expanded;\n    }\n    toggleSubMenu(submenu) {\n      submenu.expanded = !submenu.expanded;\n    }\n    expand(items) {\n      items.forEach(item => {\n        item.expanded = this.isActive(item.route);\n        if (item.children) this.expand(item.children);\n      });\n    }\n    isActive(instruction) {\n      return this.router.isActive(this.router.createUrlTree([instruction]), {\n        paths: 'subset',\n        queryParams: 'subset',\n        fragment: 'ignored',\n        matrixParams: 'ignored'\n      });\n    }\n    ngOnDestroy() {\n      this._subscription.unsubscribe();\n    }\n    static #_ = this.ɵfac = function MenuService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MenuService)(i0.ɵɵinject(i1.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MenuService,\n      factory: MenuService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return MenuService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}