{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, inject, Optional, SkipSelf, ElementRef, KeyValueDiffers, Renderer2, input, signal, effect, Component, ChangeDetectionStrategy, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { map, tap, catchError, finalize, share } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/common/http';\nconst _c0 = [\"*\"];\nclass SvgLoader {}\nlet SvgHttpLoader = /*#__PURE__*/(() => {\n  class SvgHttpLoader extends SvgLoader {\n    constructor(http) {\n      super();\n      this.http = http;\n    }\n    getSvg(url) {\n      return this.http.get(url, {\n        responseType: 'text'\n      });\n    }\n    static #_ = this.ɵfac = function SvgHttpLoader_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SvgHttpLoader)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: SvgHttpLoader,\n      factory: SvgHttpLoader.ɵfac\n    });\n  }\n  return SvgHttpLoader;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst SERVER_URL = new InjectionToken('SERVER_URL');\nlet SvgIconRegistryService = /*#__PURE__*/(() => {\n  class SvgIconRegistryService {\n    constructor() {\n      this.loader = inject(SvgLoader);\n      this.serverUrl = inject(SERVER_URL, {\n        optional: true\n      });\n      this.document = inject(DOCUMENT);\n      this.iconsByUrl = new Map();\n      this.iconsLoadingByUrl = new Map();\n    }\n    /** Add a SVG to the registry by passing a name and the SVG. */\n    addSvg(name, data) {\n      if (!this.iconsByUrl.has(name)) {\n        const div = this.document.createElement('DIV');\n        div.innerHTML = data;\n        const svg = div.querySelector('svg');\n        this.iconsByUrl.set(name, svg);\n      }\n    }\n    /** Load a SVG to the registry from a URL. */\n    loadSvg(url, name = url) {\n      // not sure if there should be a possibility to use name for server usage\n      // so overriding it for now if provided\n      // maybe should separate functionality for url and name use-cases\n      if (this.serverUrl && url.match(/^(http(s)?):/) === null) {\n        url = this.serverUrl + url;\n        name = url;\n      }\n      if (this.iconsByUrl.has(name)) {\n        return of(this.iconsByUrl.get(name));\n      } else if (this.iconsLoadingByUrl.has(name)) {\n        return this.iconsLoadingByUrl.get(name);\n      }\n      const o = this.loader.getSvg(url).pipe(map(svg => {\n        const div = this.document.createElement('DIV');\n        div.innerHTML = svg;\n        return div.querySelector('svg');\n      }), tap(svg => this.iconsByUrl.set(name, svg)), catchError(err => {\n        console.error(err);\n        return throwError(err);\n      }), finalize(() => this.iconsLoadingByUrl.delete(name)), share());\n      this.iconsLoadingByUrl.set(name, o);\n      return o;\n    }\n    /** Get loaded SVG from registry by name. (also works by url because of blended map) */\n    getSvgByName(name) {\n      if (this.iconsByUrl.has(name)) {\n        return of(this.iconsByUrl.get(name));\n      } else if (this.iconsLoadingByUrl.has(name)) {\n        return this.iconsLoadingByUrl.get(name);\n      }\n      return throwError(`No svg with name '${name}' has been loaded`);\n    }\n    /** Remove a SVG from the registry by URL (or name). */\n    unloadSvg(url) {\n      if (this.iconsByUrl.has(url)) {\n        this.iconsByUrl.delete(url);\n      }\n    }\n    static #_ = this.ɵfac = function SvgIconRegistryService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SvgIconRegistryService)();\n    };\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: SvgIconRegistryService,\n      factory: SvgIconRegistryService.ɵfac\n    });\n  }\n  return SvgIconRegistryService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction SVG_ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry) {\n  return parentRegistry || new SvgIconRegistryService();\n}\nconst SVG_ICON_REGISTRY_PROVIDER = {\n  provide: SvgIconRegistryService,\n  deps: [[new Optional(), new SkipSelf(), SvgIconRegistryService]],\n  useFactory: SVG_ICON_REGISTRY_PROVIDER_FACTORY\n};\nclass SvgIconHelper {\n  constructor() {\n    this.loaded = false;\n  }\n}\nlet SvgIconComponent = /*#__PURE__*/(() => {\n  class SvgIconComponent {\n    constructor() {\n      this.element = inject(ElementRef);\n      this.differs = inject(KeyValueDiffers);\n      this.renderer = inject(Renderer2);\n      this.iconReg = inject(SvgIconRegistryService);\n      this.src = input();\n      this.name = input();\n      this.stretch = input(false);\n      this.applyClass = input(false);\n      this.svgClass = input();\n      this.klass = input(undefined, {\n        alias: 'class'\n      });\n      this.viewBox = input();\n      this.svgAriaLabel = input();\n      this.svg = signal(0);\n      // Adapted from ngStyle (see:  angular/packages/common/src/directives/ng_style.ts)\n      this.svgStyle = input();\n      this.helper = new SvgIconHelper();\n      // Watch for src or name changes\n      effect(() => {\n        if (this.src() || this.name()) {\n          this.destroy();\n          this.init(this.src(), this.name());\n        }\n      }, {\n        allowSignalWrites: true\n      });\n      // Watch for viewBox changes\n      effect(() => {\n        const viewBox = this.viewBox();\n        if (!this.svg()) return;\n        this.updateViewBox(viewBox);\n      });\n      // Watch for style changes\n      effect(() => {\n        const values = this.svgStyle() || {};\n        if (!this.svg()) return;\n        this.applyChanges(this.helper.differ.diff(values));\n      });\n      // Watch for applyClass changes\n      effect(() => {\n        const _ = this.svg();\n        if (this.applyClass()) {\n          this.setClass(this.elemSvg, null, this.klass());\n        } else {\n          this.setClass(this.elemSvg, this.klass(), null);\n        }\n      });\n      // Watch for svgClass changes\n      let previousSvgClass;\n      effect(() => {\n        const _ = this.svg();\n        this.setClass(this.elemSvg, previousSvgClass, this.svgClass());\n        previousSvgClass = this.svgClass();\n      });\n      // Watch for klass changes\n      let previousKlass;\n      effect(() => {\n        const _ = this.svg();\n        const elem = this.element.nativeElement;\n        this.setClass(elem, previousKlass, this.klass());\n        this.setClass(this.elemSvg, previousKlass, this.applyClass() ? this.klass() : null);\n        previousKlass = this.klass();\n      });\n      // Watch for svgAriaLabel changes\n      effect(() => {\n        const _ = this.svg();\n        this.doAria(this.svgAriaLabel());\n      });\n      // Watch for stretch changes\n      effect(() => {\n        const _ = this.svg();\n        this.stylize(this.stretch());\n      });\n    }\n    ngOnDestroy() {\n      this.destroy();\n    }\n    get elemSvg() {\n      return this.element.nativeElement.firstChild;\n    }\n    init(src, name) {\n      if (src && name) {\n        const svgObs = this.iconReg.loadSvg(src, name);\n        if (svgObs) {\n          this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));\n        }\n      } else if (name) {\n        const svgObs = this.iconReg.getSvgByName(name);\n        if (svgObs) {\n          this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));\n        }\n      } else if (src) {\n        const svgObs = this.iconReg.loadSvg(src);\n        if (svgObs) {\n          this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));\n        }\n      } else {\n        this.element.nativeElement.innerHTML = '';\n        this.svg.set(0);\n      }\n    }\n    initSvg(svg) {\n      if (!this.helper.loaded && svg) {\n        this.setSvg(svg);\n      }\n    }\n    destroy() {\n      this.helper.icnSub?.unsubscribe();\n      this.helper = new SvgIconHelper();\n      // initialize differ with empty object\n      this.helper.differ = this.differs.find({}).create();\n    }\n    setSvg(svg) {\n      if (!this.helper.loaded && svg) {\n        this.helper.svg = svg;\n        const icon = svg.cloneNode(true);\n        const elem = this.element.nativeElement;\n        elem.innerHTML = '';\n        this.renderer.appendChild(elem, icon);\n        this.helper.loaded = true;\n        this.copyNgContentAttribute(elem, icon);\n        this.svg.update(x => x + 1);\n      }\n    }\n    updateViewBox(viewBox) {\n      if (viewBox) {\n        const icon = this.elemSvg;\n        if (viewBox === 'auto') {\n          // Attempt to convert height & width to a viewBox.\n          const w = icon.getAttribute('width');\n          const h = icon.getAttribute('height');\n          if (h && w) {\n            const vb = `0 0 ${w} ${h}`;\n            this.renderer.setAttribute(icon, 'viewBox', vb);\n            this.renderer.removeAttribute(icon, 'width');\n            this.renderer.removeAttribute(icon, 'height');\n          }\n        } else if (viewBox !== '') {\n          this.renderer.setAttribute(icon, 'viewBox', viewBox);\n          this.renderer.removeAttribute(icon, 'width');\n          this.renderer.removeAttribute(icon, 'height');\n        }\n      }\n    }\n    copyNgContentAttribute(hostElem, icon) {\n      const attributes = hostElem.attributes;\n      const len = attributes.length;\n      for (let i = 0; i < len; i += 1) {\n        const attribute = attributes.item(i);\n        if (attribute && attribute.name.startsWith('_ngcontent')) {\n          this.setNgContentAttribute(icon, attribute.name);\n          break;\n        }\n      }\n    }\n    setNgContentAttribute(parent, attributeName) {\n      this.renderer.setAttribute(parent, attributeName, '');\n      const len = parent.childNodes.length;\n      for (let i = 0; i < len; i += 1) {\n        const child = parent.childNodes[i];\n        if (child instanceof Element) {\n          this.setNgContentAttribute(child, attributeName);\n        }\n      }\n    }\n    stylize(stretch) {\n      if (this.helper.svg) {\n        const svg = this.element.nativeElement.firstChild;\n        if (stretch === true) {\n          this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');\n        } else if (stretch === false) {\n          this.renderer.removeAttribute(svg, 'preserveAspectRatio');\n        }\n      }\n    }\n    applyChanges(changes) {\n      if (!changes) return;\n      changes.forEachRemovedItem(record => this.setStyle(record.key, null));\n      changes.forEachAddedItem(record => this.setStyle(record.key, record.currentValue));\n      changes.forEachChangedItem(record => this.setStyle(record.key, record.currentValue));\n    }\n    setStyle(nameAndUnit, value) {\n      const [name, unit] = nameAndUnit.split('.');\n      value = value !== null && unit ? `${value}${unit}` : value;\n      const svg = this.elemSvg;\n      if (value !== null) {\n        this.renderer.setStyle(svg, name, value);\n      } else {\n        this.renderer.removeStyle(svg, name);\n      }\n    }\n    setClass(target, previous, current) {\n      if (target) {\n        if (previous) {\n          const klasses = (Array.isArray(previous) ? previous : previous.split(' ')).filter(klass => klass);\n          for (const k of klasses) {\n            this.renderer.removeClass(target, k);\n          }\n        }\n        if (current) {\n          const klasses = (Array.isArray(current) ? current : current.split(' ')).filter(klass => klass);\n          for (const k of klasses) {\n            this.renderer.addClass(target, k);\n          }\n        }\n      }\n    }\n    doAria(label) {\n      const svg = this.element.nativeElement.firstChild;\n      // If there is not a svgAriaLabel and the SVG has an arial-label, then do not override\n      // the SVG's aria-label.\n      if (svg && !(label === undefined && svg.hasAttribute('aria-label'))) {\n        if (label === '') {\n          this.renderer.setAttribute(svg, 'aria-hidden', 'true');\n          this.renderer.removeAttribute(svg, 'aria-label');\n        } else {\n          this.renderer.removeAttribute(svg, 'aria-hidden');\n          this.renderer.setAttribute(svg, 'aria-label', label);\n        }\n      }\n    }\n    static #_ = this.ɵfac = function SvgIconComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SvgIconComponent)();\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: SvgIconComponent,\n      selectors: [[\"svg-icon\"]],\n      inputs: {\n        src: [1, \"src\"],\n        name: [1, \"name\"],\n        stretch: [1, \"stretch\"],\n        applyClass: [1, \"applyClass\"],\n        svgClass: [1, \"svgClass\"],\n        klass: [1, \"class\", \"klass\"],\n        viewBox: [1, \"viewBox\"],\n        svgAriaLabel: [1, \"svgAriaLabel\"],\n        svgStyle: [1, \"svgStyle\"]\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function SvgIconComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return SvgIconComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideAngularSvgIcon(config = {}) {\n  return makeEnvironmentProviders([SVG_ICON_REGISTRY_PROVIDER, config.loader || {\n    provide: SvgLoader,\n    useClass: SvgHttpLoader\n  }]);\n}\nlet AngularSvgIconModule = /*#__PURE__*/(() => {\n  class AngularSvgIconModule {\n    static forRoot(config = {}) {\n      return {\n        ngModule: AngularSvgIconModule,\n        providers: [SVG_ICON_REGISTRY_PROVIDER, config.loader || {\n          provide: SvgLoader,\n          useClass: SvgHttpLoader\n        }]\n      };\n    }\n    static #_ = this.ɵfac = function AngularSvgIconModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AngularSvgIconModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: AngularSvgIconModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return AngularSvgIconModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularSvgIconModule, SERVER_URL, SVG_ICON_REGISTRY_PROVIDER, SVG_ICON_REGISTRY_PROVIDER_FACTORY, SvgHttpLoader, SvgIconComponent, SvgIconRegistryService, SvgLoader, provideAngularSvgIcon };","map":{"version":3,"names":["i0","Injectable","InjectionToken","inject","Optional","SkipSelf","ElementRef","KeyValueDiffers","Renderer2","input","signal","effect","Component","ChangeDetectionStrategy","makeEnvironmentProviders","NgModule","of","throwError","map","tap","catchError","finalize","share","DOCUMENT","i1","_c0","SvgLoader","SvgHttpLoader","constructor","http","getSvg","url","get","responseType","_","ɵfac","SvgHttpLoader_Factory","__ngFactoryType__","ɵɵinject","HttpClient","_2","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","SERVER_URL","SvgIconRegistryService","loader","serverUrl","optional","document","iconsByUrl","Map","iconsLoadingByUrl","addSvg","name","data","has","div","createElement","innerHTML","svg","querySelector","set","loadSvg","match","o","pipe","err","console","error","delete","getSvgByName","unloadSvg","SvgIconRegistryService_Factory","SVG_ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","SVG_ICON_REGISTRY_PROVIDER","provide","deps","useFactory","SvgIconHelper","loaded","SvgIconComponent","element","differs","renderer","iconReg","src","stretch","applyClass","svgClass","klass","undefined","alias","viewBox","svgAriaLabel","svgStyle","helper","destroy","init","allowSignalWrites","updateViewBox","values","applyChanges","differ","diff","setClass","elemSvg","previousSvgClass","previousKlass","elem","nativeElement","doAria","stylize","ngOnDestroy","firstChild","svgObs","icnSub","subscribe","initSvg","setSvg","unsubscribe","find","create","icon","cloneNode","appendChild","copyNgContentAttribute","update","x","w","getAttribute","h","vb","setAttribute","removeAttribute","hostElem","attributes","len","length","i","attribute","item","startsWith","setNgContentAttribute","parent","attributeName","childNodes","child","Element","changes","forEachRemovedItem","record","setStyle","key","forEachAddedItem","currentValue","forEachChangedItem","nameAndUnit","value","unit","split","removeStyle","target","previous","current","klasses","Array","isArray","filter","k","removeClass","addClass","label","hasAttribute","SvgIconComponent_Factory","ɵcmp","ɵɵdefineComponent","type","selectors","inputs","standalone","features","ɵɵStandaloneFeature","ngContentSelectors","decls","vars","template","SvgIconComponent_Template","rf","ctx","ɵɵprojectionDef","ɵɵprojection","encapsulation","changeDetection","provideAngularSvgIcon","config","useClass","AngularSvgIconModule","forRoot","ngModule","providers","AngularSvgIconModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector"],"sources":["C:/Users/walte/Documents/hackaton/locallyflow/ui/node_modules/angular-svg-icon/fesm2022/angular-svg-icon.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, inject, Optional, SkipSelf, ElementRef, KeyValueDiffers, Renderer2, input, signal, effect, Component, ChangeDetectionStrategy, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { map, tap, catchError, finalize, share } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/common/http';\n\nclass SvgLoader {\n}\nclass SvgHttpLoader extends SvgLoader {\n    constructor(http) {\n        super();\n        this.http = http;\n    }\n    getSvg(url) {\n        return this.http.get(url, { responseType: 'text' });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.3\", ngImport: i0, type: SvgHttpLoader, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.3\", ngImport: i0, type: SvgHttpLoader }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.3\", ngImport: i0, type: SvgHttpLoader, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i1.HttpClient }] });\n\nconst SERVER_URL = new InjectionToken('SERVER_URL');\nclass SvgIconRegistryService {\n    constructor() {\n        this.loader = inject(SvgLoader);\n        this.serverUrl = inject(SERVER_URL, { optional: true });\n        this.document = inject(DOCUMENT);\n        this.iconsByUrl = new Map();\n        this.iconsLoadingByUrl = new Map();\n    }\n    /** Add a SVG to the registry by passing a name and the SVG. */\n    addSvg(name, data) {\n        if (!this.iconsByUrl.has(name)) {\n            const div = this.document.createElement('DIV');\n            div.innerHTML = data;\n            const svg = div.querySelector('svg');\n            this.iconsByUrl.set(name, svg);\n        }\n    }\n    /** Load a SVG to the registry from a URL. */\n    loadSvg(url, name = url) {\n        // not sure if there should be a possibility to use name for server usage\n        // so overriding it for now if provided\n        // maybe should separate functionality for url and name use-cases\n        if (this.serverUrl && url.match(/^(http(s)?):/) === null) {\n            url = this.serverUrl + url;\n            name = url;\n        }\n        if (this.iconsByUrl.has(name)) {\n            return of(this.iconsByUrl.get(name));\n        }\n        else if (this.iconsLoadingByUrl.has(name)) {\n            return this.iconsLoadingByUrl.get(name);\n        }\n        const o = this.loader.getSvg(url).pipe(map(svg => {\n            const div = this.document.createElement('DIV');\n            div.innerHTML = svg;\n            return div.querySelector('svg');\n        }), tap(svg => this.iconsByUrl.set(name, svg)), catchError(err => {\n            console.error(err);\n            return throwError(err);\n        }), finalize(() => this.iconsLoadingByUrl.delete(name)), share());\n        this.iconsLoadingByUrl.set(name, o);\n        return o;\n    }\n    /** Get loaded SVG from registry by name. (also works by url because of blended map) */\n    getSvgByName(name) {\n        if (this.iconsByUrl.has(name)) {\n            return of(this.iconsByUrl.get(name));\n        }\n        else if (this.iconsLoadingByUrl.has(name)) {\n            return this.iconsLoadingByUrl.get(name);\n        }\n        return throwError(`No svg with name '${name}' has been loaded`);\n    }\n    /** Remove a SVG from the registry by URL (or name). */\n    unloadSvg(url) {\n        if (this.iconsByUrl.has(url)) {\n            this.iconsByUrl.delete(url);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.3\", ngImport: i0, type: SvgIconRegistryService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.3\", ngImport: i0, type: SvgIconRegistryService }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.3\", ngImport: i0, type: SvgIconRegistryService, decorators: [{\n            type: Injectable\n        }] });\nfunction SVG_ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry) {\n    return parentRegistry || new SvgIconRegistryService();\n}\nconst SVG_ICON_REGISTRY_PROVIDER = {\n    provide: SvgIconRegistryService,\n    deps: [[new Optional(), new SkipSelf(), SvgIconRegistryService]],\n    useFactory: SVG_ICON_REGISTRY_PROVIDER_FACTORY\n};\n\nclass SvgIconHelper {\n    constructor() {\n        this.loaded = false;\n    }\n}\nclass SvgIconComponent {\n    constructor() {\n        this.element = inject(ElementRef);\n        this.differs = inject(KeyValueDiffers);\n        this.renderer = inject(Renderer2);\n        this.iconReg = inject(SvgIconRegistryService);\n        this.src = input();\n        this.name = input();\n        this.stretch = input(false);\n        this.applyClass = input(false);\n        this.svgClass = input();\n        this.klass = input(undefined, { alias: 'class' });\n        this.viewBox = input();\n        this.svgAriaLabel = input();\n        this.svg = signal(0);\n        // Adapted from ngStyle (see:  angular/packages/common/src/directives/ng_style.ts)\n        this.svgStyle = input();\n        this.helper = new SvgIconHelper();\n        // Watch for src or name changes\n        effect(() => {\n            if (this.src() || this.name()) {\n                this.destroy();\n                this.init(this.src(), this.name());\n            }\n        }, { allowSignalWrites: true });\n        // Watch for viewBox changes\n        effect(() => {\n            const viewBox = this.viewBox();\n            if (!this.svg())\n                return;\n            this.updateViewBox(viewBox);\n        });\n        // Watch for style changes\n        effect(() => {\n            const values = this.svgStyle() || {};\n            if (!this.svg())\n                return;\n            this.applyChanges(this.helper.differ.diff(values));\n        });\n        // Watch for applyClass changes\n        effect(() => {\n            const _ = this.svg();\n            if (this.applyClass()) {\n                this.setClass(this.elemSvg, null, this.klass());\n            }\n            else {\n                this.setClass(this.elemSvg, this.klass(), null);\n            }\n        });\n        // Watch for svgClass changes\n        let previousSvgClass;\n        effect(() => {\n            const _ = this.svg();\n            this.setClass(this.elemSvg, previousSvgClass, this.svgClass());\n            previousSvgClass = this.svgClass();\n        });\n        // Watch for klass changes\n        let previousKlass;\n        effect(() => {\n            const _ = this.svg();\n            const elem = this.element.nativeElement;\n            this.setClass(elem, previousKlass, this.klass());\n            this.setClass(this.elemSvg, previousKlass, this.applyClass() ? this.klass() : null);\n            previousKlass = this.klass();\n        });\n        // Watch for svgAriaLabel changes\n        effect(() => {\n            const _ = this.svg();\n            this.doAria(this.svgAriaLabel());\n        });\n        // Watch for stretch changes\n        effect(() => {\n            const _ = this.svg();\n            this.stylize(this.stretch());\n        });\n    }\n    ngOnDestroy() {\n        this.destroy();\n    }\n    get elemSvg() {\n        return this.element.nativeElement.firstChild;\n    }\n    init(src, name) {\n        if (src && name) {\n            const svgObs = this.iconReg.loadSvg(src, name);\n            if (svgObs) {\n                this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));\n            }\n        }\n        else if (name) {\n            const svgObs = this.iconReg.getSvgByName(name);\n            if (svgObs) {\n                this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));\n            }\n        }\n        else if (src) {\n            const svgObs = this.iconReg.loadSvg(src);\n            if (svgObs) {\n                this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));\n            }\n        }\n        else {\n            this.element.nativeElement.innerHTML = '';\n            this.svg.set(0);\n        }\n    }\n    initSvg(svg) {\n        if (!this.helper.loaded && svg) {\n            this.setSvg(svg);\n        }\n    }\n    destroy() {\n        this.helper.icnSub?.unsubscribe();\n        this.helper = new SvgIconHelper();\n        // initialize differ with empty object\n        this.helper.differ = this.differs.find({}).create();\n    }\n    setSvg(svg) {\n        if (!this.helper.loaded && svg) {\n            this.helper.svg = svg;\n            const icon = svg.cloneNode(true);\n            const elem = this.element.nativeElement;\n            elem.innerHTML = '';\n            this.renderer.appendChild(elem, icon);\n            this.helper.loaded = true;\n            this.copyNgContentAttribute(elem, icon);\n            this.svg.update(x => x + 1);\n        }\n    }\n    updateViewBox(viewBox) {\n        if (viewBox) {\n            const icon = this.elemSvg;\n            if (viewBox === 'auto') {\n                // Attempt to convert height & width to a viewBox.\n                const w = icon.getAttribute('width');\n                const h = icon.getAttribute('height');\n                if (h && w) {\n                    const vb = `0 0 ${w} ${h}`;\n                    this.renderer.setAttribute(icon, 'viewBox', vb);\n                    this.renderer.removeAttribute(icon, 'width');\n                    this.renderer.removeAttribute(icon, 'height');\n                }\n            }\n            else if (viewBox !== '') {\n                this.renderer.setAttribute(icon, 'viewBox', viewBox);\n                this.renderer.removeAttribute(icon, 'width');\n                this.renderer.removeAttribute(icon, 'height');\n            }\n        }\n    }\n    copyNgContentAttribute(hostElem, icon) {\n        const attributes = hostElem.attributes;\n        const len = attributes.length;\n        for (let i = 0; i < len; i += 1) {\n            const attribute = attributes.item(i);\n            if (attribute && attribute.name.startsWith('_ngcontent')) {\n                this.setNgContentAttribute(icon, attribute.name);\n                break;\n            }\n        }\n    }\n    setNgContentAttribute(parent, attributeName) {\n        this.renderer.setAttribute(parent, attributeName, '');\n        const len = parent.childNodes.length;\n        for (let i = 0; i < len; i += 1) {\n            const child = parent.childNodes[i];\n            if (child instanceof Element) {\n                this.setNgContentAttribute(child, attributeName);\n            }\n        }\n    }\n    stylize(stretch) {\n        if (this.helper.svg) {\n            const svg = this.element.nativeElement.firstChild;\n            if (stretch === true) {\n                this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');\n            }\n            else if (stretch === false) {\n                this.renderer.removeAttribute(svg, 'preserveAspectRatio');\n            }\n        }\n    }\n    applyChanges(changes) {\n        if (!changes)\n            return;\n        changes.forEachRemovedItem((record) => this.setStyle(record.key, null));\n        changes.forEachAddedItem((record) => this.setStyle(record.key, record.currentValue));\n        changes.forEachChangedItem((record) => this.setStyle(record.key, record.currentValue));\n    }\n    setStyle(nameAndUnit, value) {\n        const [name, unit] = nameAndUnit.split('.');\n        value = value !== null && unit ? `${value}${unit}` : value;\n        const svg = this.elemSvg;\n        if (value !== null) {\n            this.renderer.setStyle(svg, name, value);\n        }\n        else {\n            this.renderer.removeStyle(svg, name);\n        }\n    }\n    setClass(target, previous, current) {\n        if (target) {\n            if (previous) {\n                const klasses = (Array.isArray(previous) ? previous : previous.split(' ')).filter((klass) => klass);\n                for (const k of klasses) {\n                    this.renderer.removeClass(target, k);\n                }\n            }\n            if (current) {\n                const klasses = (Array.isArray(current) ? current : current.split(' ')).filter((klass) => klass);\n                for (const k of klasses) {\n                    this.renderer.addClass(target, k);\n                }\n            }\n        }\n    }\n    doAria(label) {\n        const svg = this.element.nativeElement.firstChild;\n        // If there is not a svgAriaLabel and the SVG has an arial-label, then do not override\n        // the SVG's aria-label.\n        if (svg && !(label === undefined && svg.hasAttribute('aria-label'))) {\n            if (label === '') {\n                this.renderer.setAttribute(svg, 'aria-hidden', 'true');\n                this.renderer.removeAttribute(svg, 'aria-label');\n            }\n            else {\n                this.renderer.removeAttribute(svg, 'aria-hidden');\n                this.renderer.setAttribute(svg, 'aria-label', label);\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.3\", ngImport: i0, type: SvgIconComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.1.0\", version: \"18.0.3\", type: SvgIconComponent, isStandalone: true, selector: \"svg-icon\", inputs: { src: { classPropertyName: \"src\", publicName: \"src\", isSignal: true, isRequired: false, transformFunction: null }, name: { classPropertyName: \"name\", publicName: \"name\", isSignal: true, isRequired: false, transformFunction: null }, stretch: { classPropertyName: \"stretch\", publicName: \"stretch\", isSignal: true, isRequired: false, transformFunction: null }, applyClass: { classPropertyName: \"applyClass\", publicName: \"applyClass\", isSignal: true, isRequired: false, transformFunction: null }, svgClass: { classPropertyName: \"svgClass\", publicName: \"svgClass\", isSignal: true, isRequired: false, transformFunction: null }, klass: { classPropertyName: \"klass\", publicName: \"class\", isSignal: true, isRequired: false, transformFunction: null }, viewBox: { classPropertyName: \"viewBox\", publicName: \"viewBox\", isSignal: true, isRequired: false, transformFunction: null }, svgAriaLabel: { classPropertyName: \"svgAriaLabel\", publicName: \"svgAriaLabel\", isSignal: true, isRequired: false, transformFunction: null }, svgStyle: { classPropertyName: \"svgStyle\", publicName: \"svgStyle\", isSignal: true, isRequired: false, transformFunction: null } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.3\", ngImport: i0, type: SvgIconComponent, decorators: [{\n            type: Component,\n            args: [{\n                    standalone: true,\n                    selector: 'svg-icon',\n                    template: '<ng-content></ng-content>',\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: () => [] });\n\nfunction provideAngularSvgIcon(config = {}) {\n    return makeEnvironmentProviders([\n        SVG_ICON_REGISTRY_PROVIDER,\n        config.loader || { provide: SvgLoader, useClass: SvgHttpLoader },\n    ]);\n}\nclass AngularSvgIconModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: AngularSvgIconModule,\n            providers: [\n                SVG_ICON_REGISTRY_PROVIDER,\n                config.loader || { provide: SvgLoader, useClass: SvgHttpLoader }\n            ]\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.3\", ngImport: i0, type: AngularSvgIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.3\", ngImport: i0, type: AngularSvgIconModule, imports: [SvgIconComponent], exports: [SvgIconComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.3\", ngImport: i0, type: AngularSvgIconModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.3\", ngImport: i0, type: AngularSvgIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        SvgIconComponent\n                    ],\n                    exports: [SvgIconComponent]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularSvgIconModule, SERVER_URL, SVG_ICON_REGISTRY_PROVIDER, SVG_ICON_REGISTRY_PROVIDER_FACTORY, SvgHttpLoader, SvgIconComponent, SvgIconRegistryService, SvgLoader, provideAngularSvgIcon };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}